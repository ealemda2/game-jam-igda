{"version":3,"sources":["utility.js","Scene.js","Components/Landing.js","serviceWorker.js","index.js"],"names":["getRandomInt","max","min","parseInt","Math","random","selectDeselectButton","selected","otherButtons","render","opacity","i","length","Scene","props","renderChooseText","state","hatChosen","style","display","position","fontSize","top","left","fontFamily","renderDoneButton","engine","height","alignItems","backgroundColor","margin","type","onClick","handleDoneClick","screenSize","headPeak","y","point2","x","point3","point4","scoreBounds","Matter","Bounds","create","overlaps","world","bodies","filter","body","bounds","maxHeight","map","score","abs","console","log","setState","donePlaying","renderScore","modifiedScore","toFixed","renderAudioButton","audioPlaying","document","getElementById","play","styles","color","SoundOutlined","pause","Engine","Render","World","Bodies","Body","Mouse","MouseConstraint","Runner","Events","Vector","window","innerWidth","innerHeight","this","toolState","setReactState","key","value","element","refs","scene","mouse","options","width","hasBounds","wireframes","background","runner","run","boundsScale","on","translate","mouseConstraint","scaleFactor","wheelDelta","direction","speed","mult","upVector","setPosition","transformButton","add","rotateButton","scaleButton","createCircleButton","createRectangleButton","createTriangleButton","setOffset","ballA","circle","restitution","ballB","rectC","rectangle","trashCan","isStatic","fillStyle","chamfer","radius","trashCanBoundaryLeft","angle","trashCanBoundaryRight","skinColors","skinPicker","headColor","splice","head","noseColor","noseSize","nose","polygon","PI","leftEye","rightEye","eyeColors","eyeColorPicker","rightIris","rightPupil","leftIris","leftPupil","fullHead","parts","canvas","constraint","stiffness","visible","buttonStrokeColors","strokeColor","isSensor","sprite","texture","xScale","yScale","baseHatButton1","baseHatButton2","baseHatButton3","pairs","forEach","bodyA","bodyB","remove","event","baseHat","mousePressed","mousedownPosition","Object","keys","includes","mouseDisplacement","selectedBody","lineWidth","hatColors","hatColorSelector","currentTool","hatBody","hatTop","danglingBall","danglingChain","Constraint","pointA","pointB","damping","hatBottom","hatRightSide","hatLeftSide","hatMiddle","trapezoid","strokeStyle","rotate","mouseCurrentPosition","magnitude","scaleDirection","normalise","scale","sign","u","sqrt","diplay","ref","React","Component","Landing","renderLandingNav","buttonStyle","id","to","renderGameNav","isOpen","renderHamburger","UpCircleOutlined","onClickOpen","DownCircleOutlined","prevState","location","pathname","Boolean","hostname","match","App","exact","from","path","component","About","href","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.79973b05.chunk.js","sourcesContent":["//import Matter from \"matter-js\";\n\nexport const getRandomInt = (max, min) => {\n    return parseInt(Math.random() * (max - min) + min);\n}\n\nexport const selectDeselectButton = (selected, otherButtons) => {\n\n    selected.render.opacity = 0.3;\n    for (let i = 0; i < otherButtons.length; i++) {\n        otherButtons[i].render.opacity = 1;\n    }\n}\n\n//----------------------------------------------------------------------------\n\nexport const radians = (degrees) => {\n    return degrees * Math.PI / 180.0;\n}\n\nexport const dot = (u, v) => {\n    if (u.length != v.length) {\n        throw { message: \"dot(): vectors are not the same dimension\" };\n    }\n\n    var sum = 0.0;\n    for (var i = 0; i < u.length; ++i) {\n        sum += u[i] * v[i];\n    }\n\n    return sum;\n}\n\nexport const vectorLength = (u) => {\n    return Math.sqrt(u.x * u.x + u.y * u.y);\n}\n\n\n","import React from \"react\";\nimport Matter, { Mouse, Constraint } from \"matter-js\";\nimport { getRandomInt } from \"./utility\";\nimport { selectDeselectButton } from \"./utility\";\nimport { vectorLength } from \"./utility\";\nimport { SoundOutlined } from \"@ant-design/icons\";\nimport { scryRenderedDOMComponentsWithTag } from \"react-dom/test-utils\";\nimport { Button } from \"antd\";\nimport \"antd/dist/antd.css\";\n\nclass Scene extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      render: null,\n      hatChosen: false,\n      audioPlaying: false,\n      score: 0,\n      engine: null,\n      screenSize: null,\n      donePlaying: false,\n    };\n  }\n\n  componentDidMount() {\n    const Engine = Matter.Engine,\n      Render = Matter.Render,\n      World = Matter.World,\n      Bodies = Matter.Bodies,\n      Body = Matter.Body,\n      Mouse = Matter.Mouse,\n      MouseConstraint = Matter.MouseConstraint,\n      Runner = Matter.Runner,\n      Events = Matter.Events,\n      Bounds = Matter.Bounds,\n      Vector = Matter.Vector;\n    //Common = Matter.Common;\n    let screenSize = { x: window.innerWidth, y: window.innerHeight };\n    this.setState({ screenSize });\n    const toolState = {};\n    const setToolState = (key, value) => {\n      if (!Object.keys(toolState).includes(key)) {\n        toolState[key] = null;\n      }\n      toolState[key] = value;\n      return toolState;\n    };\n\n    const getToolState = () => toolState;\n    const setReactState = (key, value) => {\n      this.setState({ [key]: value });\n    };\n    const getReactState = () => this.state;\n    const engine = Engine.create({\n      // positionIterations: 20\n    });\n    const render = Render.create({\n      element: this.refs.scene,\n      engine: engine,\n      mouse: MouseConstraint.mouse,\n      options: {\n        width: window.innerWidth,\n        height: window.innerHeight,\n        hasBounds: true,\n        wireframes: false,\n        background: \"#E4F5FC\",\n      },\n    });\n    this.setState({ engine });\n    // create runner (viewport)\n    const runner = Runner.create();\n    Runner.run(runner, engine);\n\n    const viewportCentre = {\n      x: render.options.width * 0.5,\n      y: render.options.height * 0.5,\n    };\n\n    // make the world bounds a little bigger than the render bounds\n    engine.world.bounds.min.y = -1000;\n    engine.world.bounds.max.y = window.innerHeight;\n\n    // keep track of current bounds scale (view zoom)\n    let boundsScaleTarget = 1;\n    const boundsScale = {\n      x: 1,\n      y: 1,\n    };\n\n    Events.on(engine, \"beforeTick\", function () {\n      let mouse = mouseConstraint.mouse;\n      let world = engine.world;\n      let translate;\n      // mouse wheel controls zoom\n      let scaleFactor = mouse.wheelDelta * -0.1;\n      if (scaleFactor !== 0) {\n        if (\n          (scaleFactor < 0 && boundsScale.x >= 0.6) ||\n          (scaleFactor > 0 && boundsScale.x <= 1.4)\n        ) {\n          boundsScaleTarget += scaleFactor;\n        }\n        // create a vector to translate the view, allowing the user to control view speed\n        let direction = Vector.create(0, 1);\n        let speed = scaleFactor * 90;\n\n        translate = Vector.mult(direction, speed);\n\n        // prevent the view moving outside the world bounds\n        if (render.bounds.min.x + translate.x < world.bounds.min.x)\n          translate.x = world.bounds.min.x - render.bounds.min.x;\n\n        if (render.bounds.max.x + translate.x > world.bounds.max.x)\n          translate.x = world.bounds.max.x - render.bounds.max.x;\n\n        if (render.bounds.min.y + translate.y < world.bounds.min.y)\n          translate.y = world.bounds.min.y - render.bounds.min.y;\n\n        if (render.bounds.max.y + translate.y > world.bounds.max.y)\n          translate.y = world.bounds.max.y - render.bounds.max.y;\n\n        // move the view\n        Bounds.translate(render.bounds, translate);\n\n        // Move buttons\n        const upVector = Vector.create(0, translate.y);\n        Matter.Body.setPosition(\n          transformButton,\n          Vector.add(transformButton.position, upVector)\n        );\n        Matter.Body.setPosition(\n          rotateButton,\n          Vector.add(rotateButton.position, upVector)\n        );\n        Matter.Body.setPosition(\n          scaleButton,\n          Vector.add(scaleButton.position, upVector)\n        );\n        Matter.Body.setPosition(\n          createCircleButton,\n          Vector.add(createCircleButton.position, upVector)\n        );\n        Matter.Body.setPosition(\n          createRectangleButton,\n          Vector.add(createRectangleButton.position, upVector)\n        );\n        Matter.Body.setPosition(\n          createTriangleButton,\n          Vector.add(createTriangleButton.position, upVector)\n        );\n\n        // we must update the mouse too\n        Mouse.setOffset(mouse, render.bounds.min);\n      }\n    });\n\n    Events.on(engine, \"afterTick\", function () {\n      const currentScore = getReactState().score;\n    });\n\n    const ballA = Bodies.circle(210, 100, 30, { restitution: 0.5 });\n    const ballB = Bodies.circle(110, 50, 30, { restitution: 0.5 });\n    const rectC = Bodies.rectangle(110, 50, 60, 100, { restitution: 0.5 });\n    const trashCan = Bodies.rectangle(\n      screenSize.x * 0.8,\n      screenSize.y - 35,\n      270,\n      25,\n      {\n        isStatic: true,\n        render: { fillStyle: \"#020202\" },\n        chamfer: { radius: [0, 0, 10, 10] },\n      }\n    );\n    const trashCanBoundaryLeft = Bodies.rectangle(\n      screenSize.x * 0.8 - 145,\n      screenSize.y - 130,\n      20,\n      200,\n      {\n        isStatic: true,\n        render: { fillStyle: \"#010101\" },\n        angle: -0.2,\n        chamfer: { radius: [10, 10, 0, 0] },\n      }\n    );\n    const trashCanBoundaryRight = Bodies.rectangle(\n      screenSize.x * 0.8 + 145,\n      screenSize.y - 130,\n      20,\n      200,\n      {\n        isStatic: true,\n        render: { fillStyle: \"#010101\" },\n        angle: 0.2,\n        chamfer: { radius: [10, 10, 0, 0] },\n      }\n    );\n\n    const wallColor = \"#FCFAA4\";\n\n    World.add(engine.world, [\n      // walls\n      Bodies.rectangle(screenSize.x / 2, screenSize.y, screenSize.x, 50, {\n        isStatic: true,\n        render: { fillStyle: wallColor },\n      }), //bottom wall\n      Bodies.rectangle(screenSize.x, screenSize.y / 2.0, 50, 2000, {\n        isStatic: true,\n        render: { fillStyle: wallColor },\n      }), //right wall\n      Bodies.rectangle(0, screenSize.y / 2.0, 50, 2000, {\n        isStatic: true,\n        render: { fillStyle: wallColor },\n      }), //left wall\n    ]);\n\n    // Head constructi\n    let skinColors = [\n      \"#E0B094\",\n      \"#4A2C13\",\n      \"#E0C1A2\",\n      \"#9E784F\",\n      \"#70441F\",\n      \"#D1A669\",\n      \"#E8C48F\",\n    ];\n    let skinPicker = getRandomInt(0, skinColors.length - 1);\n    let headColor = skinColors.splice(skinPicker, 1);\n\n    // Head\n    const head = Bodies.circle(screenSize.x / 2.0, screenSize.y / 2.0, 140, {\n      isStatic: true,\n      render: { fillStyle: headColor },\n    });\n\n    // Nose\n    let noseColor = skinColors.splice(\n      getRandomInt(0, skinColors.length - 1),\n      1\n    );\n    let noseSize = 10 * getRandomInt(3, 7);\n    const nose = Bodies.polygon(\n      head.position.x,\n      head.position.y + 20,\n      3,\n      noseSize,\n      {\n        angle: Math.PI / 2.0,\n        render: { fillStyle: noseColor },\n        chamfer: { radius: [20, 0, 20] },\n      }\n    );\n\n    // Eyes\n    let leftEye = Bodies.rectangle(\n      head.position.x - 60,\n      head.position.y - 50,\n      50,\n      50,\n      {\n        angle: Math.PI / 4.0,\n        render: { fillStyle: \"#ffffff\" },\n        chamfer: { radius: [40, 10, 40, 10] },\n      }\n    );\n\n    let rightEye = Bodies.rectangle(\n      head.position.x + 60,\n      head.position.y - 50,\n      50,\n      50,\n      {\n        angle: Math.PI / 4.0,\n        render: { fillStyle: \"#ffffff\" },\n        chamfer: { radius: [40, 10, 40, 10] },\n      }\n    );\n\n    let eyeColors = [\"#71C3DB\", \"#86DB68\", \"#876C1D\", \"#4F2D11\"];\n    let eyeColorPicker = getRandomInt(0, eyeColors.length - 1);\n    // Pupils\n    let rightIris = Bodies.circle(\n      rightEye.position.x,\n      rightEye.position.y,\n      10,\n      { render: { fillStyle: eyeColors[eyeColorPicker] } }\n    );\n    let rightPupil = Bodies.circle(\n      rightEye.position.x,\n      rightEye.position.y,\n      4,\n      { render: { fillStyle: \"#000000\" } }\n    );\n    let leftIris = Bodies.circle(leftEye.position.x, leftEye.position.y, 10, {\n      render: { fillStyle: eyeColors[eyeColorPicker] },\n    });\n    let leftPupil = Bodies.circle(leftEye.position.x, leftEye.position.y, 4, {\n      render: { fillStyle: \"#000000\" },\n    });\n\n    // Composite object that holds all head parts\n    const fullHead = Body.create({\n      parts: [\n        head,\n        nose,\n        rightEye,\n        leftEye,\n        rightIris,\n        leftIris,\n        rightPupil,\n        leftPupil,\n      ],\n      isStatic: true,\n    });\n\n    World.add(engine.world, [ballA, ballB, rectC]);\n\n    // add mouse control\n    const mouse = Mouse.create(render.canvas),\n      mouseConstraint = MouseConstraint.create(engine, {\n        mouse: mouse,\n        constraint: {\n          stiffness: 0.1,\n          render: {\n            visible: false,\n          },\n        },\n      });\n\n    World.add(engine.world, mouseConstraint);\n\n    // Button features\n    const buttonStrokeColors = {\n      transform: \"#FF0000\",\n      scale: \"#00FF00\",\n      rotate: \"#0000FF\",\n    };\n    let strokeColor = buttonStrokeColors.transform;\n    const transformButton = Bodies.circle(50, 50, 20, {\n      isStatic: true,\n      isSensor: true,\n      render: {\n        opacity: 0.4,\n        sprite: {\n          texture: \"../images/transform.png\",\n          xScale: 1,\n          yScale: 1,\n        },\n      },\n    });\n    const rotateButton = Bodies.circle(50, 100, 20, {\n      isStatic: true,\n      isSensor: true,\n      render: {\n        opacity: 1,\n        sprite: {\n          texture: \"../images/rotate.png\",\n          xScale: 1,\n          yScale: 1,\n        },\n      },\n    });\n    const scaleButton = Bodies.circle(50, 150, 20, {\n      isStatic: true,\n      isSensor: true,\n      render: {\n        opacity: 1,\n        sprite: {\n          texture: \"../images/scale.png\",\n          xScale: 1,\n          yScale: 1,\n        },\n      },\n    });\n\n    const baseHatButton1 = Bodies.circle(window.innerWidth / 4, 300, 130, {\n      isStatic: true,\n      isSensor: true,\n      render: {\n        opacity: 1,\n        sprite: {\n          texture: \"../images/hatPreset1.png\",\n          xScale: 1,\n          yScale: 1,\n        },\n      },\n    });\n\n    const baseHatButton2 = Bodies.circle(window.innerWidth / 2, 300, 130, {\n      isStatic: true,\n      isSensor: true,\n      render: {\n        opacity: 1,\n        sprite: {\n          texture: \"../images/hatPreset2.png\",\n          xScale: 1,\n          yScale: 1,\n        },\n      },\n    });\n\n    const baseHatButton3 = Bodies.circle(\n      (window.innerWidth * 3) / 4,\n      300,\n      130,\n      {\n        isStatic: true,\n        isSensor: true,\n        render: {\n          opacity: 1,\n          sprite: {\n            texture: \"../images/hatPreset3.png\",\n            xScale: 1,\n            yScale: 1,\n          },\n        },\n      }\n    );\n\n    const createCircleButton = Bodies.circle(50, 200, 20, {\n      isStatic: true,\n      isSensor: true,\n      render: {\n        opacity: 1,\n        sprite: {\n          texture: \"../images/circle.png\",\n          xScale: 1,\n          yScale: 1,\n        },\n      },\n    });\n\n    const createRectangleButton = Bodies.circle(50, 250, 20, {\n      isStatic: true,\n      isSensor: true,\n      render: {\n        opacity: 1,\n        sprite: {\n          texture: \"../images/rectangle.png\",\n          xScale: 1,\n          yScale: 1,\n        },\n      },\n    });\n    const createTriangleButton = Bodies.circle(50, 300, 20, {\n      isStatic: true,\n      isSensor: true,\n      render: {\n        opacity: 1,\n        sprite: {\n          texture: \"../images/triangle.png\",\n          xScale: 1,\n          yScale: 1,\n        },\n      },\n    });\n\n    Matter.Events.on(engine, \"collisionEnd\", ({ pairs }) => {\n      pairs.forEach(({ bodyA, bodyB }) => {\n        if (bodyA === trashCan) World.remove(engine.world, bodyB);\n        if (bodyB === trashCan) World.remove(engine.world, bodyA);\n      });\n    });\n\n    World.add(engine.world, [\n      scaleButton,\n      transformButton,\n      rotateButton,\n      baseHatButton1,\n      baseHatButton2,\n      baseHatButton3,\n      createCircleButton,\n      createRectangleButton,\n      createTriangleButton,\n    ]);\n    Matter.Events.on(mouseConstraint, \"mousedown\", function (event) {\n      //const rand = Math.random();\n\n      if (!toolState.mousePressed) {\n        setToolState(\"mouseStartPosition\", mouse.mousedownPosition);\n        toolState.mouseDisplacement = 0;\n      }\n\n      // deselect previous body\n      if (toolState.selectedBody) {\n        toolState.selectedBody.render.lineWidth = 0;\n      }\n      toolState.selectedBody = mouseConstraint.body;\n      toolState.mousePressed = true;\n      let baseHat;\n      const hatColors = [\n        \"#4036E0\",\n        \"#F26B9B\",\n        \"#DBAB67\",\n        \"#96E0C9\",\n        \"#58E0B5\",\n        \"#8F94F2\",\n        \"#DB88B9\",\n        \"#FFD09E\",\n        \"#000000\",\n      ];\n      let hatColorSelector = getRandomInt(0, hatColors.length);\n\n      // for buttons\n      switch (toolState.selectedBody) {\n        case transformButton:\n          selectDeselectButton(transformButton, [\n            scaleButton,\n            rotateButton,\n            createCircleButton,\n            createRectangleButton,\n            createTriangleButton,\n          ]);\n          toolState.currentTool = \"transform\";\n          strokeColor = buttonStrokeColors.transform;\n          break;\n\n        case rotateButton:\n          selectDeselectButton(rotateButton, [\n            transformButton,\n            scaleButton,\n            createCircleButton,\n            createRectangleButton,\n            createTriangleButton,\n          ]);\n          toolState.currentTool = \"rotate\";\n          strokeColor = buttonStrokeColors.rotate;\n          break;\n\n        case scaleButton:\n          selectDeselectButton(scaleButton, [\n            transformButton,\n            rotateButton,\n            createCircleButton,\n            createRectangleButton,\n            createTriangleButton,\n          ]);\n          toolState.currentTool = \"scale\";\n          strokeColor = buttonStrokeColors.scale;\n          break;\n\n        case baseHatButton1:\n          baseHat = Bodies.rectangle(\n            fullHead.position.x,\n            fullHead.position.y - 120,\n            400,\n            40,\n            {\n              isStatic: true,\n              render: { fillStyle: hatColors[hatColorSelector] },\n              chamfer: { radius: [0, 0, 30, 30] },\n            }\n          );\n          setReactState(\"hatChosen\", true);\n          World.add(engine.world, [\n            fullHead,\n            baseHat,\n            trashCan,\n            trashCanBoundaryLeft,\n            trashCanBoundaryRight,\n          ]);\n          World.remove(engine.world, [\n            baseHatButton1,\n            baseHatButton2,\n            baseHatButton3,\n          ]);\n          break;\n\n        case baseHatButton2:\n          const hatBody = Bodies.rectangle(\n            fullHead.position.x,\n            fullHead.position.y - 140,\n            100,\n            100,\n            {\n              isStatic: true,\n              render: { fillStyle: hatColors[hatColorSelector] },\n            }\n          );\n          const hatTop = Bodies.rectangle(\n            fullHead.position.x,\n            fullHead.position.y - 200,\n            400,\n            20,\n            {\n              isStatic: true,\n              render: { fillStyle: hatColors[hatColorSelector] },\n            }\n          );\n\n          const danglingBall = Bodies.circle(\n            hatTop.position.x - 300,\n            hatTop.position.y + 50,\n            30,\n            { render: { fillStyle: \"#000000\" } }\n          );\n          const danglingChain = Constraint.create({\n            bodyA: danglingBall,\n            pointA: { x: 10, y: 0 },\n            bodyB: hatTop,\n            pointB: { x: -170, y: 0 },\n            stiffness: 0.6,\n            damping: 0.5,\n          });\n\n          baseHat = Body.create({ parts: [hatBody, hatTop], isStatic: true });\n\n          setReactState(\"hatChosen\", true);\n          World.add(engine.world, [\n            fullHead,\n            baseHat,\n            danglingBall,\n            danglingChain,\n            trashCan,\n            trashCanBoundaryLeft,\n            trashCanBoundaryRight,\n          ]);\n          World.remove(engine.world, [\n            baseHatButton1,\n            baseHatButton2,\n            baseHatButton3,\n          ]);\n          break;\n\n        case baseHatButton3:\n          const hatBottom = Bodies.rectangle(\n            fullHead.position.x,\n            fullHead.position.y - 130,\n            400,\n            50,\n            {\n              isStatic: true,\n              chamfer: { radius: [10, 10, 30, 30] },\n              render: { fillStyle: hatColors[hatColorSelector] },\n            }\n          );\n          const hatRightSide = Bodies.rectangle(\n            fullHead.position.x + 190,\n            fullHead.position.y - 150,\n            50,\n            100,\n            {\n              isStatic: true,\n              angle: Math.PI / 4,\n              chamfer: { radius: [30, 30, 30, 10] },\n              render: { fillStyle: hatColors[hatColorSelector] },\n            }\n          );\n          const hatLeftSide = Bodies.rectangle(\n            fullHead.position.x - 190,\n            fullHead.position.y - 150,\n            50,\n            100,\n            {\n              isStatic: true,\n              angle: -Math.PI / 4,\n              chamfer: { radius: [30, 30, 30, 30] },\n              render: { fillStyle: hatColors[hatColorSelector] },\n            }\n          );\n          const hatMiddle = Bodies.trapezoid(\n            fullHead.position.x,\n            fullHead.position.y - 160,\n            150,\n            120,\n            0.5,\n            {\n              isStatic: true,\n              render: { fillStyle: hatColors[hatColorSelector] },\n              //chamfer: { radius: [10, 30, 10, 30] }\n            }\n          );\n          baseHat = Body.create({\n            parts: [hatBottom, hatRightSide, hatLeftSide, hatMiddle],\n            isStatic: true,\n          });\n          setReactState(\"hatChosen\", true);\n          World.add(engine.world, [\n            fullHead,\n            baseHat,\n            trashCan,\n            trashCanBoundaryLeft,\n            trashCanBoundaryRight,\n          ]);\n          World.remove(engine.world, [\n            baseHatButton1,\n            baseHatButton2,\n            baseHatButton3,\n          ]);\n          break;\n\n        case createCircleButton:\n          selectDeselectButton(createCircleButton, [\n            scaleButton,\n            rotateButton,\n            transformButton,\n            createRectangleButton,\n            createTriangleButton,\n          ]);\n          toolState.currentTool = \"createCircle\";\n          strokeColor = buttonStrokeColors.transform;\n          break;\n\n        case createRectangleButton:\n          selectDeselectButton(createRectangleButton, [\n            scaleButton,\n            rotateButton,\n            createCircleButton,\n            transformButton,\n            createTriangleButton,\n          ]);\n          toolState.currentTool = \"createRectangle\";\n          strokeColor = buttonStrokeColors.transform;\n          break;\n\n        case createTriangleButton:\n          selectDeselectButton(createTriangleButton, [\n            scaleButton,\n            rotateButton,\n            createCircleButton,\n            createRectangleButton,\n            transformButton,\n          ]);\n          toolState.currentTool = \"createTriangle\";\n          strokeColor = buttonStrokeColors.transform;\n          break;\n\n        // for moveable non static objects\n        default:\n          if (\n            toolState.selectedBody &&\n            toolState.selectedBody.isStatic !== true\n          ) {\n            toolState.selectedBody.render.lineWidth = 10.0;\n            toolState.selectedBody.render.strokeStyle = strokeColor;\n\n            // code for rotate\n            if (toolState.currentTool === \"rotate\") {\n              Body.rotate(toolState.selectedBody, Math.PI / 2, [\n                toolState.selectedBody.position,\n              ]);\n            }\n          }\n\n          if (mouseConstraint.body === null) {\n            if (toolState.currentTool === \"createCircle\") {\n              World.add(\n                engine.world,\n                Bodies.circle(\n                  mouse.position.x,\n                  mouse.position.y,\n                  getRandomInt(10, 60),\n                  { restitution: 0.5 }\n                )\n              );\n            } else if (toolState.currentTool === \"createRectangle\") {\n              World.add(\n                engine.world,\n                Bodies.rectangle(\n                  mouse.position.x,\n                  mouse.position.y,\n                  getRandomInt(40, 100),\n                  getRandomInt(40, 100),\n                  { restitution: 0.5 }\n                )\n              );\n            } else if (toolState.currentTool === \"createTriangle\") {\n              World.add(\n                engine.world,\n                Bodies.polygon(\n                  mouse.position.x,\n                  mouse.position.y,\n                  3,\n                  getRandomInt(20, 80),\n                  { restitution: 0.5 }\n                )\n              );\n            }\n          }\n          break;\n      }\n    });\n\n    Matter.Events.on(mouseConstraint, \"mouseup\", function (event) {\n      /*\n      if(toolState.selectedBody){\n        toolState.selectedBody.render.lineWidth = 0.0;\n      }\n      */\n\n      toolState.mousePressed = false;\n    });\n\n    Matter.Events.on(mouseConstraint, \"mousemove\", function (event) {\n      //let mouse = mouseConstraint.mouse;\n      toolState.mouseCurrentPosition = Vector.create(\n        mouse.position.x,\n        mouse.position.y\n      );\n\n      if (toolState.mousePressed === true && mouseConstraint.body) {\n        switch (toolState.currentTool) {\n          case \"translate\":\n            // just use default constraint for translate\n            break;\n          case \"scale\":\n            if (\n              mouseConstraint.body.isSensor === false &&\n              mouseConstraint.body.isStatic === false\n            ) {\n              toolState.mouseDisplacement = Vector.create(\n                toolState.mouseCurrentPosition.x - mouse.mousedownPosition.x,\n                toolState.mouseCurrentPosition.y - mouse.mousedownPosition.y\n              );\n\n              let scaleFactor =\n                Vector.magnitude(toolState.mouseDisplacement) / 3000;\n              let scaleDirection = Vector.normalise(\n                toolState.mouseDisplacement\n              );\n\n              Body.scale(\n                mouseConstraint.body,\n                1 + scaleDirection.x * scaleFactor,\n                1 - scaleDirection.y * scaleFactor\n              ); // scale factor\n            }\n            break;\n          case \"rotate\":\n            // TODO make object rotate\n            if (\n              mouseConstraint.body.isSensor === false &&\n              mouseConstraint.body.isStatic === false\n            ) {\n              let rotateFactor =\n                (Math.sign(toolState.mouseDisplacement.x) *\n                  vectorLength(toolState.mouseDisplacement)) /\n                100;\n            }\n            break;\n          default:\n            break;\n        }\n      }\n    });\n\n    Matter.Events.on(mouseConstraint, \"startdrag\", function (event) {});\n\n    Engine.run(engine);\n    Render.run(render);\n  }\n\n  render() {\n    const { donePlaying } = this.state;\n    return (\n      <div style={{ diplay: \"flex\" }}>\n        {this.renderChooseText()}\n        {this.renderDoneButton()}\n        {this.renderAudioButton()}\n        {donePlaying ? this.renderScore() : null}\n        <div ref=\"scene\" />\n      </div>\n    );\n  }\n\n  renderChooseText = () => {\n    const { hatChosen } = this.state;\n    return !hatChosen ? (\n      <h1\n        style={{\n          display: \"flex\",\n          position: \"absolute\",\n          fontSize: \"40pt\",\n          top: \"10vh\",\n          left: \"32vw\",\n          fontFamily: \"Bungee Inline\",\n        }}\n      >\n        CHOOSE STARTING HAT\n      </h1>\n    ) : null;\n  };\n\n  renderDoneButton = () => {\n    const { engine } = this.state;\n    const styles = {\n      display: \"flex\",\n      position: \"absolute\",\n      top: \"4vh\",\n      fontSize: \"16pt\",\n      left: \"85vw\",\n      height: \"50px\",\n      alignItems: \"center\",\n      backgroundColor: \"#2fb51d\",\n      margin: \"5px 5px 5px 5px\",\n      fontFamily: \"Bungee Inline\",\n    };\n    return (\n      <Button\n        style={styles}\n        type=\"primary\"\n        onClick={() => this.handleDoneClick(engine)}\n      >\n        I'm Done!\n      </Button>\n    );\n  };\n\n  handleDoneClick = (engine) => {\n    const { screenSize } = this.state;\n    const headPeak = screenSize.y / 2 - 140;\n    const point1 = { x: 250, y: -1100 };\n    const point2 = { x: 250, y: headPeak };\n    const point3 = { x: screenSize.x - 250, y: -1100 };\n    const point4 = { x: screenSize.x - 250, y: headPeak };\n    const scoreBounds = Matter.Bounds.create([point1, point2, point3, point4]);\n    const overlaps = engine.world.bodies.filter((body) =>\n      Matter.Bounds.overlaps(scoreBounds, body.bounds)\n    );\n\n    let maxHeight = 0;\n    overlaps.map((body) => {\n      if (body.position.y < maxHeight) {\n        maxHeight = body.position.y;\n      }\n    });\n\n    const score = Math.abs(headPeak - maxHeight);\n    console.log(\"Score:\", score);\n    this.setState({ score: score, donePlaying: true });\n  };\n\n  renderScore = () => {\n    const { score } = this.state;\n    const modifiedScore = score.toFixed(1);\n    const styles = {\n      display: \"flex\",\n      position: \"absolute\",\n      fontSize: \"30pt\",\n      top: \"5vh\",\n      left: \"38vw\",\n      fontFamily: \"Bungee Inline\",\n    };\n    return <h2 style={styles}>You Scored: {modifiedScore}</h2>;\n  };\n\n  renderAudioButton = () => {\n    const { audioPlaying } = this.state;\n    if (audioPlaying) {\n      document.getElementById(\"audio\").play();\n    }\n    const start = () => {\n      this.setState({ audioPlaying: true });\n    };\n    const pause = () => {\n      document.getElementById(\"audio\").pause();\n      this.setState({ audioPlaying: false });\n    };\n    const styles = {\n      display: \"flex\",\n      position: \"absolute\",\n      fontSize: \"30pt\",\n      top: \"5vh\",\n      left: \"95vw\",\n    };\n    return (\n      <div\n        style={\n          audioPlaying\n            ? { ...styles, color: \"#020202\" }\n            : { ...styles, color: \"#767676\" }\n        }\n      >\n        <SoundOutlined onClick={audioPlaying ? pause : start}>\n          Play\n        </SoundOutlined>\n      </div>\n    );\n  };\n}\nexport default Scene;\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { UpCircleOutlined, DownCircleOutlined } from \"@ant-design/icons\";\nimport { Button, Row } from \"antd\";\n\nimport \"../landing.css\";\nimport \"antd/dist/antd.css\";\n\nclass Landing extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen: props.location.pathname === \"/landing\",\n    };\n  }\n\n  render() {\n    return this.renderLandingNav();\n  }\n\n  renderLandingNav = () => {\n    const buttonStyle = {\n      width: \"250px\",\n      height: \"100px\",\n      fontSize: \"16pt\",\n    };\n    return (\n      <div id=\"landing-nav\">\n        <Row>\n          <Button\n            style={{ ...buttonStyle, backgroundColor: \"#621bc4\" }}\n            type=\"primary\"\n          >\n            <Link to=\"/game\">Play Hat Trick!</Link>\n          </Button>\n        </Row>\n        <Row>\n          <Button style={buttonStyle} type=\"secondary\">\n            <Link to=\"/about\">About</Link>\n          </Button>\n        </Row>\n      </div>\n    );\n  };\n\n  renderGameNav = () => {\n    const { isOpen } = this.props;\n    if (isOpen) {\n      return (\n        <div id=\"game-nav\">\n          <nav>\n            <ul>\n              <li>\n                <Link to=\"/game\">Game</Link>\n              </li>\n              <li>\n                <Link to=\"/about\">About</Link>\n              </li>\n            </ul>\n            {this.renderHamburger()}\n          </nav>\n        </div>\n      );\n    }\n    return this.renderHamburger();\n  };\n\n  renderHamburger = () => {\n    const { isOpen } = this.props;\n\n    return isOpen ? (\n      <UpCircleOutlined onClick={this.onClickOpen} />\n    ) : (\n      <DownCircleOutlined onClick={this.onClickOpen} />\n    );\n  };\n\n  onClickOpen = (prevState) => {\n    this.setState({ isOpen: !prevState.isOpen });\n  };\n}\n\nexport default Landing;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Scene from \"./Scene\";\nimport Landing from \"./Components/Landing\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect,\n} from \"react-router-dom\";\n\nexport class App extends Component {\n  render() {\n    return (\n      <Router>\n        <div id=\"main\">\n          {/* A <Switch> looks through its children <Route>s and\n              renders the first one that matches the current URL. */}\n          <Switch>\n            <Redirect exact from=\"/\" to=\"/landing\" />\n            <Route path=\"/landing\" component={Landing} />\n            <Route path=\"/game\" component={Scene} />\n            <Route path=\"/about\" component={About} />\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nfunction About() {\n  const styles = {\n    display: \"flex\",\n    position: \"absolute\",\n    fontSize: \"30pt\",\n    top: \"10vh\",\n    left: \"35vw\",\n    fontFamily: \"Bungee Inline\",\n  };\n  return (\n    <a href=\"https://calemdar.github.io/\" style={styles}>\n      Made by Cem & Ert - 2020\n    </a>\n  );\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}